const { ethers } = require('ethers');
const fs = require('fs');
require('dotenv').config();

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
const contractArtifact = JSON.parse(fs.readFileSync('./artifacts/SlotMachineBank.json', 'utf8'));

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
const provider = new ethers.JsonRpcProvider(process.env.IRYS_RPC_URL);

// –ì–∞–º–∞–Ω—Ü—ñ
const playerWallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
const serverWallet = new ethers.Wallet(process.env.SERVER_WALLET_KEY, provider);

// –ö–æ–Ω—Ç—Ä–∞–∫—Ç
const contract = new ethers.Contract(
  process.env.CONTRACT_ADDRESS,
  contractArtifact.abi,
  provider
);

// –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –≥—Ä–∞–≤—Ü—è
const playerContract = contract.connect(playerWallet);
// –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º —Å–µ—Ä–≤–µ—Ä–∞
const serverContract = contract.connect(serverWallet);

// –£—Ç–∏–ª—ñ—Ç–∏
function formatIRYS(wei) {
  return ethers.formatEther(wei);
}

function parseIRYS(amount) {
  return ethers.parseEther(amount.toString());
}

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–º
function log(message) {
  const timestamp = new Date().toLocaleTimeString();
  console.log(`[${timestamp}] ${message}`);
}

// –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
async function testInitialState() {
  log('üîç –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
  
  try {
    const owner = await contract.owner();
    const serverWalletAddr = await contract.serverWallet();
    const minDeposit = await contract.minDeposit();
    const contractBalance = await contract.getContractBalance();
    const totalDeposited = await contract.totalDeposited();
    const isPaused = await contract.paused();
    
    log(`   üëë –í–ª–∞—Å–Ω–∏–∫: ${owner}`);
    log(`   üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å: ${serverWalletAddr}`);
    log(`   üí∞ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${formatIRYS(minDeposit)} IRYS`);
    log(`   üè¶ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formatIRYS(contractBalance)} IRYS`);
    log(`   üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤: ${formatIRYS(totalDeposited)} IRYS`);
    log(`   ‚è∏Ô∏è  –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ: ${isPaused}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤
    const playerBalance = await provider.getBalance(playerWallet.address);
    const serverBalance = await provider.getBalance(serverWallet.address);
    
    log(`   üë§ –ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è: ${formatIRYS(playerBalance)} IRYS`);
    log(`   üñ•Ô∏è  –ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä–∞: ${formatIRYS(serverBalance)} IRYS`);
    
    log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\\n');
    return true;
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}\\n`);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –î–µ–ø–æ–∑–∏—Ç –≥—Ä–∞–≤—Ü—è
async function testPlayerDeposit() {
  log('üí∞ –¢–µ—Å—Ç 2: –î–µ–ø–æ–∑–∏—Ç –≥—Ä–∞–≤—Ü—è');
  
  try {
    const depositAmount = parseIRYS('0.1'); // 0.1 IRYS
    
    log(`   üì§ –î–µ–ø–æ–∑–∏—Ç ${formatIRYS(depositAmount)} IRYS...`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –¥–æ –¥–µ–ø–æ–∑–∏—Ç—É
    const balanceBefore = await contract.getBalance(playerWallet.address);
    log(`   üìä –ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è –¥–æ –¥–µ–ø–æ–∑–∏—Ç—É: ${formatIRYS(balanceBefore)} IRYS`);
    
    // –†–æ–±–∏–º–æ –¥–µ–ø–æ–∑–∏—Ç
    const tx = await playerContract.deposit({ value: depositAmount });
    log(`   ‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –¥–µ–ø–æ–∑–∏—Ç—É: ${tx.hash}`);
    
    const receipt = await tx.wait();
    log(`   ‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤ –±–ª–æ—Ü—ñ: ${receipt.blockNumber}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –¥–µ–ø–æ–∑–∏—Ç—É
    const balanceAfter = await contract.getBalance(playerWallet.address);
    log(`   üìä –ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è –ø—ñ—Å–ª—è –¥–µ–ø–æ–∑–∏—Ç—É: ${formatIRYS(balanceAfter)} IRYS`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—ó
    const depositEvent = receipt.logs.find(log => 
      log.topics[0] === ethers.id('Deposit(address,uint256,uint256)')
    );
    
    if (depositEvent) {
      log(`   üéâ –ü–æ–¥—ñ—è Deposit –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞`);
    }
    
    log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\\n');
    return true;
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}\\n`);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –Ü–º—ñ—Ç–∞—Ü—ñ—è –≥—Ä–∏ (—Å—Ç–∞–≤–∫–∞ —Ç–∞ –≤–∏–≥—Ä–∞—à/–ø—Ä–æ–≥—Ä–∞—à)
async function testGameSimulation() {
  log('üé∞ –¢–µ—Å—Ç 3: –Ü–º—ñ—Ç–∞—Ü—ñ—è –≥—Ä–∏');
  
  try {
    const betAmount = parseIRYS('0.01'); // –°—Ç–∞–≤–∫–∞ 0.01 IRYS
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –¥–æ —Å—Ç–∞–≤–∫–∏
    const balanceBefore = await contract.getBalance(playerWallet.address);
    log(`   üìä –ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è –¥–æ —Å—Ç–∞–≤–∫–∏: ${formatIRYS(balanceBefore)} IRYS`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏
    const hasSufficient = await contract.hasSufficientBalance(playerWallet.address, betAmount);
    log(`   üí≥ –î–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏: ${hasSufficient}`);
    
    if (!hasSufficient) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏');
    }
    
    // –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ü—Ä–æ–≥—Ä–∞—à (–≤—ñ–¥–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞–≤–∫—É)
    log(`   üé≤ –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ü—Ä–æ–≥—Ä–∞—à - –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞–≤–∫—É ${formatIRYS(betAmount)} IRYS`);
    
    const lossTx = await serverContract.updateBalance(
      playerWallet.address,
      -betAmount, // –í—ñ–¥'—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞—à—É
      'loss'
    );
    
    await lossTx.wait();
    log(`   ‚úÖ –ü—Ä–æ–≥—Ä–∞—à –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${lossTx.hash}`);
    
    const balanceAfterLoss = await contract.getBalance(playerWallet.address);
    log(`   üìä –ë–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –ø—Ä–æ–≥—Ä–∞—à—É: ${formatIRYS(balanceAfterLoss)} IRYS`);
    
    await delay(2000);
    
    // –°—Ü–µ–Ω–∞—Ä—ñ–π 2: –í–∏–≥—Ä–∞—à (–¥–æ–¥–∞—î–º–æ –≤–∏–≥—Ä–∞—à)
    const winAmount = parseIRYS('0.05'); // –í–∏–≥—Ä–∞—à 0.05 IRYS
    log(`   üéâ –°—Ü–µ–Ω–∞—Ä—ñ–π 2: –í–∏–≥—Ä–∞—à - –¥–æ–¥–∞—î–º–æ ${formatIRYS(winAmount)} IRYS`);
    
    const winTx = await serverContract.updateBalance(
      playerWallet.address,
      winAmount, // –ü–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∏–≥—Ä–∞—à—É
      'win'
    );
    
    await winTx.wait();
    log(`   ‚úÖ –í–∏–≥—Ä–∞—à –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${winTx.hash}`);
    
    const balanceAfterWin = await contract.getBalance(playerWallet.address);
    log(`   üìä –ë–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –≤–∏–≥—Ä–∞—à—É: ${formatIRYS(balanceAfterWin)} IRYS`);
    
    log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\\n');
    return true;
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}\\n`);
    return false;
  }
}

// –¢–µ—Å—Ç 4: –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤
async function testPlayerWithdraw() {
  log('üí∏ –¢–µ—Å—Ç 4: –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤ –≥—Ä–∞–≤—Ü–µ–º');
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
    const currentBalance = await contract.getBalance(playerWallet.address);
    log(`   üìä –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è: ${formatIRYS(currentBalance)} IRYS`);
    
    if (currentBalance === 0n) {
      log(`   ‚ö†Ô∏è  –ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è –Ω—É–ª—å–æ–≤–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç –≤–∏–≤–æ–¥—É`);
      return true;
    }
    
    // –í–∏–≤–æ–¥–∏–º–æ –ø–æ–ª–æ–≤–∏–Ω—É –±–∞–ª–∞–Ω—Å—É
    const withdrawAmount = currentBalance / 2n;
    log(`   üì§ –í–∏–≤—ñ–¥ ${formatIRYS(withdrawAmount)} IRYS...`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –Ω–∞—Ç–∏–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ –≤–∏–≤–æ–¥—É
    const nativeBalanceBefore = await provider.getBalance(playerWallet.address);
    
    const tx = await playerContract.withdraw(withdrawAmount);
    log(`   ‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏–≤–æ–¥—É: ${tx.hash}`);
    
    const receipt = await tx.wait();
    log(`   ‚úÖ –í–∏–≤—ñ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤ –±–ª–æ—Ü—ñ: ${receipt.blockNumber}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –ø—ñ—Å–ª—è –≤–∏–≤–æ–¥—É
    const gameBalanceAfter = await contract.getBalance(playerWallet.address);
    const nativeBalanceAfter = await provider.getBalance(playerWallet.address);
    
    log(`   üìä –Ü–≥—Ä–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –≤–∏–≤–æ–¥—É: ${formatIRYS(gameBalanceAfter)} IRYS`);
    log(`   üí∞ –ù–∞—Ç–∏–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑–±—ñ–ª—å—à–∏–≤—Å—è –Ω–∞: ${formatIRYS(nativeBalanceAfter - nativeBalanceBefore)} IRYS`);
    
    log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\\n');
    return true;
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}\\n`);
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ú–Ω–æ–∂–∏–Ω–Ω—ñ –≥—Ä–∞–≤—Ü—ñ
async function testMultiplePlayers() {
  log('üë• –¢–µ—Å—Ç 5: –ú–Ω–æ–∂–∏–Ω–Ω—ñ –≥—Ä–∞–≤—Ü—ñ');
  
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
    const player2 = ethers.Wallet.createRandom().connect(provider);
    const player3 = ethers.Wallet.createRandom().connect(provider);
    
    log(`   üë§ –ì—Ä–∞–≤–µ—Ü—å 2: ${player2.address}`);
    log(`   üë§ –ì—Ä–∞–≤–µ—Ü—å 3: ${player3.address}`);
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —ó–º —Ç—Ä–æ—Ö–∏ IRYS –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è)
    const fundAmount = parseIRYS('0.05');
    
    log(`   üí∏ –§—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤...`);
    
    const fundTx2 = await playerWallet.sendTransaction({
      to: player2.address,
      value: fundAmount
    });
    await fundTx2.wait();
    
    const fundTx3 = await playerWallet.sendTransaction({
      to: player3.address,
      value: fundAmount
    });
    await fundTx3.wait();
    
    log(`   ‚úÖ –ì—Ä–∞–≤—Ü—ñ –ø—Ä–æ—Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞–Ω—ñ`);
    
    // –ì—Ä–∞–≤—Ü—ñ —Ä–æ–±–ª—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç–∏
    const player2Contract = contract.connect(player2);
    const player3Contract = contract.connect(player3);
    
    const depositAmount = parseIRYS('0.02');
    
    log(`   üí∞ –î–µ–ø–æ–∑–∏—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤...`);
    
    const deposit2 = await player2Contract.deposit({ value: depositAmount });
    await deposit2.wait();
    
    const deposit3 = await player3Contract.deposit({ value: depositAmount });
    await deposit3.wait();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏
    const balance2 = await contract.getBalance(player2.address);
    const balance3 = await contract.getBalance(player3.address);
    
    log(`   üìä –ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è 2: ${formatIRYS(balance2)} IRYS`);
    log(`   üìä –ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è 3: ${formatIRYS(balance3)} IRYS`);
    
    // –Ü–º—ñ—Ç—É—î–º–æ –≥—Ä—É –¥–ª—è –æ–±–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
    log(`   üé∞ –Ü–º—ñ—Ç–∞—Ü—ñ—è –≥—Ä–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è 2 (–ø—Ä–æ–≥—Ä–∞—à)...`);
    await serverContract.updateBalance(player2.address, -parseIRYS('0.01'), 'loss');
    
    log(`   üé∞ –Ü–º—ñ—Ç–∞—Ü—ñ—è –≥—Ä–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è 3 (–≤–∏–≥—Ä–∞—à)...`);
    await serverContract.updateBalance(player3.address, parseIRYS('0.03'), 'win');
    
    // –§—ñ–Ω–∞–ª—å–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    const finalBalance2 = await contract.getBalance(player2.address);
    const finalBalance3 = await contract.getBalance(player3.address);
    
    log(`   üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è 2: ${formatIRYS(finalBalance2)} IRYS`);
    log(`   üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è 3: ${formatIRYS(finalBalance3)} IRYS`);
    
    log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\\n');
    return true;
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç 5 –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}\\n`);
    return false;
  }
}

// –¢–µ—Å—Ç 6: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
async function testAdminFunctions() {
  log('‚öôÔ∏è –¢–µ—Å—Ç 6: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó');
  
  try {
    // –¢–µ—Å—Ç—É—î–º–æ –∑–º—ñ–Ω—É –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É
    const newMinDeposit = parseIRYS('0.005'); // 0.005 IRYS
    log(`   üîß –ó–º—ñ–Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É –Ω–∞ ${formatIRYS(newMinDeposit)} IRYS...`);
    
    const ownerContract = contract.connect(playerWallet); // –í–ª–∞—Å–Ω–∏–∫ - —Ü–µ –¥–µ–ø–ª–æ—î—Ä
    const updateTx = await ownerContract.updateMinDeposit(newMinDeposit);
    await updateTx.wait();
    
    const updatedMinDeposit = await contract.minDeposit();
    log(`   ‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: ${formatIRYS(updatedMinDeposit)} IRYS`);
    
    // –¢–µ—Å—Ç—É—î–º–æ –ø–∞—É–∑—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    log(`   ‚è∏Ô∏è  –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...`);
    const pauseTx = await ownerContract.pause();
    await pauseTx.wait();
    
    const isPaused = await contract.paused();
    log(`   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ: ${isPaused}`);
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    log(`   ‚ñ∂Ô∏è  –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...`);
    const unpauseTx = await ownerContract.unpause();
    await unpauseTx.wait();
    
    const isUnpaused = await contract.paused();
    log(`   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ: ${!isUnpaused}`);
    
    log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\\n');
    return true;
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç 6 –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}\\n`);
    return false;
  }
}

// –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
async function testContractStats() {
  log('üìä –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
  
  try {
    const [totalDeposited, contractBalance] = await contract.getContractStats();
    const owner = await contract.owner();
    const serverWalletAddr = await contract.serverWallet();
    const minDeposit = await contract.minDeposit();
    const isPaused = await contract.paused();
    
    log(`   üìà –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:`);
    log(`   ‚îú‚îÄ‚îÄ üëë –í–ª–∞—Å–Ω–∏–∫: ${owner}`);
    log(`   ‚îú‚îÄ‚îÄ üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å: ${serverWalletAddr}`);
    log(`   ‚îú‚îÄ‚îÄ üí∞ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${formatIRYS(minDeposit)} IRYS`);
    log(`   ‚îú‚îÄ‚îÄ üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤: ${formatIRYS(totalDeposited)} IRYS`);
    log(`   ‚îú‚îÄ‚îÄ üè¶ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formatIRYS(contractBalance)} IRYS`);
    log(`   ‚îî‚îÄ‚îÄ ‚è∏Ô∏è  –°—Ç–∞–Ω: ${isPaused ? '–ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ' : '–ê–∫—Ç–∏–≤–Ω–∏–π'}`);
    
    log('‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\\n');
    return true;
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç 7 –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}\\n`);
    return false;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async function runAllTests() {
  log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è SlotMachineBank –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
  log(`üìç –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${process.env.CONTRACT_ADDRESS}`);
  log(`üîó –ú–µ—Ä–µ–∂–∞: ${process.env.IRYS_NETWORK}`);
  log(`üë§ –ì—Ä–∞–≤–µ—Ü—å: ${playerWallet.address}`);
  log(`üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: ${serverWallet.address}\\n`);
  
  const tests = [
    { name: '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω', fn: testInitialState },
    { name: '–î–µ–ø–æ–∑–∏—Ç –≥—Ä–∞–≤—Ü—è', fn: testPlayerDeposit },
    { name: '–Ü–º—ñ—Ç–∞—Ü—ñ—è –≥—Ä–∏', fn: testGameSimulation },
    { name: '–í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤', fn: testPlayerWithdraw },
    { name: '–ú–Ω–æ–∂–∏–Ω–Ω—ñ –≥—Ä–∞–≤—Ü—ñ', fn: testMultiplePlayers },
    { name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó', fn: testAdminFunctions },
    { name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É', fn: testContractStats }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      if (result) {
        passed++;
      } else {
        failed++;
      }
      await delay(1000); // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
    } catch (error) {
      log(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ "${test.name}": ${error.message}\\n`);
      failed++;
    }
  }
  
  log('üèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  log(`üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${tests.length}`);
  
  if (failed === 0) {
    log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.');
  } else {
    log('‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = {
  runAllTests,
  testInitialState,
  testPlayerDeposit,
  testGameSimulation,
  testPlayerWithdraw,
  testMultiplePlayers,
  testAdminFunctions,
  testContractStats
};