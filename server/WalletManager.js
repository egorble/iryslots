import { ethers } from 'ethers';
import winston from 'winston';

class WalletManager {
  constructor(provider, contractABI, contractAddress, logger) {
    this.provider = provider;
    this.contractABI = contractABI;
    this.contractAddress = contractAddress;
    this.logger = logger;
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ .env
    this.wallets = [];
    this.walletStatus = new Map(); // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    this.currentWalletIndex = 0;
    
    // –°–∏—Å—Ç–µ–º–∞ —á–µ—Ä–≥–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
    this.transactionQueue = [];
    this.isProcessingQueue = false;
    this.maxQueueSize = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏
    this.queueStats = {
      totalQueued: 0,
      totalProcessed: 0,
      currentQueueSize: 0,
      maxWaitTime: 0,
      averageWaitTime: 0
    };
    
    this.initializeWallets();
    this.startQueueProcessor();
  }

  initializeWallets() {
    const walletConfigs = [
      {
        key: process.env.SERVER_WALLET_KEY,
        name: 'Wallet-1 (Primary)'
      },
      {
        key: process.env.SERVER_WALLET_KEY_2,
        name: 'Wallet-2'
      },
      {
        key: process.env.SERVER_WALLET_KEY_3,
        name: 'Wallet-3'
      },
      {
        key: process.env.SERVER_WALLET_KEY_4,
        name: 'Wallet-4'
      }
    ];

    walletConfigs.forEach((config, index) => {
      if (config.key) {
        try {
          const wallet = new ethers.Wallet(config.key, this.provider);
          const contract = new ethers.Contract(
            this.contractAddress,
            this.contractABI,
            wallet
          );
          
          this.wallets.push({
            wallet,
            contract,
            name: config.name,
            index,
            isProcessing: false,
            lastUsed: 0,
            errorCount: 0
          });
          
          this.walletStatus.set(index, {
            isAvailable: true,
            isProcessing: false,
            lastError: null,
            successCount: 0,
            errorCount: 0
          });
          
          this.logger.info(`‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ${config.name}: ${wallet.address}`);
        } catch (error) {
          this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ${config.name}:`, error);
        }
      }
    });

    this.logger.info(`üéØ –ó–∞–≥–∞–ª–æ–º —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ${this.wallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤`);
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å (round-robin –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ)
  getAvailableWallet() {
    if (this.wallets.length === 0) {
      throw new Error('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤');
    }

    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å, —è–∫–∏–π –Ω–µ –æ–±—Ä–æ–±–ª—è—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    for (let i = 0; i < this.wallets.length; i++) {
      const walletIndex = (this.currentWalletIndex + i) % this.wallets.length;
      const walletInfo = this.wallets[walletIndex];
      const status = this.walletStatus.get(walletIndex);

      if (status.isAvailable && !walletInfo.isProcessing) {
        this.currentWalletIndex = (walletIndex + 1) % this.wallets.length;
        return walletInfo;
      }
    }

    // –Ø–∫—â–æ –≤—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ –∑–∞–π–Ω—è—Ç—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null (–±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É)
    return null;
  }

  // –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ —á–µ—Ä–≥—É
  addToQueue(transactionFunction, args, resolve, reject) {
    if (this.transactionQueue.length >= this.maxQueueSize) {
      const error = new Error(`–ß–µ—Ä–≥–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º ${this.maxQueueSize} –∑–∞–ø–∏—Ç—ñ–≤)`);
      this.logger.error('‚ùå –ß–µ—Ä–≥–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞:', error.message);
      reject(error);
      return;
    }

    const queueItem = {
      id: Date.now() + Math.random(), // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
      transactionFunction,
      args,
      resolve,
      reject,
      queuedAt: Date.now(),
      priority: 0 // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
    };

    this.transactionQueue.push(queueItem);
    this.queueStats.totalQueued++;
    this.queueStats.currentQueueSize = this.transactionQueue.length;

    this.logger.info(`üì• –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É (ID: ${queueItem.id.toString().slice(-6)}, –ø–æ–∑–∏—Ü—ñ—è: ${this.transactionQueue.length})`);
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ —á–µ—Ä–≥–∏ (–ø—Ä–∞—Ü—é—î –ø–æ—Å—Ç—ñ–π–Ω–æ)
  startQueueProcessor() {
    setInterval(() => {
      this.processQueue();
    }, 100); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–≥—É –∫–æ–∂–Ω—ñ 100–º—Å
  }

  // –û–±—Ä–æ–±–∏—Ç–∏ —á–µ—Ä–≥—É
  async processQueue() {
    if (this.isProcessingQueue || this.transactionQueue.length === 0) {
      return;
    }

    this.isProcessingQueue = true;

    try {
      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
      while (this.transactionQueue.length > 0) {
        const availableWallet = this.getAvailableWallet();
        if (!availableWallet) {
          // –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤, —á–µ–∫–∞—î–º–æ
          break;
        }

        const queueItem = this.transactionQueue.shift();
        this.queueStats.currentQueueSize = this.transactionQueue.length;

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        const waitTime = Date.now() - queueItem.queuedAt;
        this.queueStats.maxWaitTime = Math.max(this.queueStats.maxWaitTime, waitTime);
        this.queueStats.averageWaitTime = (this.queueStats.averageWaitTime + waitTime) / 2;

        this.logger.info(`üöÄ –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —á–µ—Ä–≥–∏ (ID: ${queueItem.id.toString().slice(-6)}, –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ${waitTime}ms)`);

        // –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        this.executeTransactionWithWallet(availableWallet, queueItem)
          .then(result => {
            this.queueStats.totalProcessed++;
            queueItem.resolve(result);
          })
          .catch(error => {
            queueItem.reject(error);
          });
      }
    } catch (error) {
      this.logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏:', error);
    } finally {
      this.isProcessingQueue = false;
    }
  }

  // –í–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –≥–∞–º–∞–Ω—Ü–µ–º
  async executeTransactionWithWallet(walletInfo, queueItem) {
    const startTime = Date.now();
    this.markWalletAsBusy(walletInfo);

    try {
      const result = await queueItem.transactionFunction(walletInfo.contract, ...queueItem.args);
      const duration = Date.now() - startTime;
      
      this.logger.info(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑ —á–µ—Ä–≥–∏ —É—Å–ø—ñ—à–Ω–∞ —á–µ—Ä–µ–∑ ${walletInfo.name} –∑–∞ ${duration}ms`);
      this.markWalletAsFree(walletInfo, true);
      return result;
    } catch (error) {
      const duration = Date.now() - startTime;
      this.logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ —á–µ—Ä–≥–∏ —á–µ—Ä–µ–∑ ${walletInfo.name} –∑–∞ ${duration}ms:`, error.message);
      this.markWalletAsFree(walletInfo, false);
      throw error;
    }
  }

  // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å —è–∫ –∑–∞–π–Ω—è—Ç–∏–π
  markWalletAsBusy(walletInfo) {
    walletInfo.isProcessing = true;
    walletInfo.lastUsed = Date.now();
    
    const status = this.walletStatus.get(walletInfo.index);
    status.isProcessing = true;
    
    this.logger.debug(`üîí ${walletInfo.name} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞–π–Ω—è—Ç–∏–π`);
  }

  // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å —è–∫ –≤—ñ–ª—å–Ω–∏–π
  markWalletAsFree(walletInfo, success = true) {
    walletInfo.isProcessing = false;
    
    const status = this.walletStatus.get(walletInfo.index);
    status.isProcessing = false;
    
    if (success) {
      status.successCount++;
      status.lastError = null;
      walletInfo.errorCount = 0;
    } else {
      status.errorCount++;
      walletInfo.errorCount++;
      status.lastError = Date.now();
      
      // –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫, —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å
      if (walletInfo.errorCount >= 3) {
        status.isAvailable = false;
        this.logger.warn(`‚ö†Ô∏è ${walletInfo.name} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏`);
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω
        setTimeout(() => {
          status.isAvailable = true;
          walletInfo.errorCount = 0;
          this.logger.info(`‚úÖ ${walletInfo.name} –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏–π`);
        }, 5 * 60 * 1000);
      }
    }
    
    this.logger.debug(`üîì ${walletInfo.name} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤—ñ–ª—å–Ω–∏–π (—É—Å–ø—ñ—Ö: ${success})`);
  }

  // –í–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–±–æ—Ä–æ–º –≥–∞–º–∞–Ω—Ü—è –∞–±–æ –¥–æ–¥–∞—Ç–∏ –≤ —á–µ—Ä–≥—É
  async executeTransaction(transactionFunction, ...args) {
    return new Promise((resolve, reject) => {
      const walletInfo = this.getAvailableWallet();
      
      if (walletInfo) {
        // –Ñ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å - –≤–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥—Ä–∞–∑—É
        this.executeTransactionWithWallet(walletInfo, {
          transactionFunction,
          args,
          resolve,
          reject,
          queuedAt: Date.now()
        }).then(resolve).catch(reject);
      } else {
        // –í—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ –∑–∞–π–Ω—è—Ç—ñ - –¥–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É
        this.logger.info('‚è≥ –í—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ –∑–∞–π–Ω—è—Ç—ñ, –¥–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ —á–µ—Ä–≥—É');
        this.addToQueue(transactionFunction, args, resolve, reject);
      }
    });
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤
  getWalletStats() {
    return this.wallets.map(walletInfo => {
      const status = this.walletStatus.get(walletInfo.index);
      return {
        name: walletInfo.name,
        address: walletInfo.wallet.address,
        isAvailable: status.isAvailable,
        isProcessing: walletInfo.isProcessing,
        successCount: status.successCount,
        errorCount: status.errorCount,
        lastUsed: walletInfo.lastUsed
      };
    });
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è (–Ω–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π)
  getPrimaryWallet() {
    return this.wallets[0];
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
  getDetailedStats() {
    const totalSuccess = this.wallets.reduce((sum, w) => {
      const status = this.walletStatus.get(w.index);
      return sum + status.successCount;
    }, 0);

    const totalErrors = this.wallets.reduce((sum, w) => {
      const status = this.walletStatus.get(w.index);
      return sum + status.errorCount;
    }, 0);

    return {
      totalWallets: this.wallets.length,
      availableWallets: this.wallets.filter(w => {
        const status = this.walletStatus.get(w.index);
        return status.isAvailable && !w.isProcessing;
      }).length,
      processingWallets: this.wallets.filter(w => w.isProcessing).length,
      totalTransactions: totalSuccess + totalErrors,
      successfulTransactions: totalSuccess,
      failedTransactions: totalErrors,
      successRate: totalSuccess + totalErrors > 0 ? (totalSuccess / (totalSuccess + totalErrors) * 100).toFixed(2) + '%' : '0%',
      wallets: this.getWalletStats(),
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥–∏
      queue: {
        currentSize: this.queueStats.currentQueueSize,
        totalQueued: this.queueStats.totalQueued,
        totalProcessed: this.queueStats.totalProcessed,
        maxWaitTime: this.queueStats.maxWaitTime,
        averageWaitTime: Math.round(this.queueStats.averageWaitTime),
        maxQueueSize: this.maxQueueSize,
        queueUtilization: ((this.queueStats.currentQueueSize / this.maxQueueSize) * 100).toFixed(1) + '%'
      }
    };
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–≥–∏
  getQueueStats() {
    return {
      currentQueueSize: this.transactionQueue.length,
      maxQueueSize: this.maxQueueSize,
      totalQueued: this.queueStats.totalQueued,
      totalProcessed: this.queueStats.totalProcessed,
      pendingTransactions: this.transactionQueue.length,
      queueUtilization: ((this.transactionQueue.length / this.maxQueueSize) * 100).toFixed(1) + '%',
      averageWaitTime: Math.round(this.queueStats.averageWaitTime),
      maxWaitTime: this.queueStats.maxWaitTime,
      isProcessingQueue: this.isProcessingQueue
    };
  }

  // –û—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É (–µ–∫—Å—Ç—Ä–µ–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫)
  clearQueue() {
    const clearedCount = this.transactionQueue.length;
    this.transactionQueue.forEach(item => {
      item.reject(new Error('–ß–µ—Ä–≥–∞ –±—É–ª–∞ –æ—á–∏—â–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'));
    });
    this.transactionQueue = [];
    this.queueStats.currentQueueSize = 0;
    this.logger.warn(`üßπ –ß–µ—Ä–≥–∞ –æ—á–∏—â–µ–Ω–∞, –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ${clearedCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π`);
    return clearedCount;
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ)
  logStats() {
    const stats = this.getDetailedStats();
    this.logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–º–∞–Ω—Ü—ñ–≤: ${stats.availableWallets}/${stats.totalWallets} –¥–æ—Å—Ç—É–ø–Ω–æ, ${stats.processingWallets} –æ–±—Ä–æ–±–ª—è—é—Ç—å, —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${stats.successRate}`);
    
    if (stats.queue.currentSize > 0 || stats.queue.totalQueued > 0) {
      this.logger.info(`üì• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥–∏: ${stats.queue.currentSize} –≤ —á–µ—Ä–∑—ñ, ${stats.queue.totalProcessed}/${stats.queue.totalQueued} –æ–±—Ä–æ–±–ª–µ–Ω–æ, —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ${stats.queue.averageWaitTime}ms`);
    }
  }
}

export default WalletManager;