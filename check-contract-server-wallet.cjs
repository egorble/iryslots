const { ethers } = require('ethers');
const fs = require('fs');
require('dotenv').config();

async function checkContractServerWallet() {
  console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ serverWallet –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ...\n');
  
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –º–µ—Ä–µ–∂—ñ
    const provider = new ethers.JsonRpcProvider(process.env.IRYS_RPC_URL);
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const contractABI = JSON.parse(
      fs.readFileSync('./artifacts/SlotMachineBank.abi.json', 'utf8')
    );
    
    const contract = new ethers.Contract(
      process.env.CONTRACT_ADDRESS,
      contractABI,
      provider
    );
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π serverWallet –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const contractServerWallet = await contract.serverWallet();
    console.log('üìã –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π serverWallet –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ:', contractServerWallet);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –Ω–∞—à—ñ –≥–∞–º–∞–Ω—Ü—ñ
    const ourWallets = [
      {
        name: 'SERVER_WALLET (–æ—Å–Ω–æ–≤–Ω–∏–π)',
        key: process.env.SERVER_WALLET_KEY,
        envAddress: process.env.SERVER_WALLET_ADDRESS
      },
      {
        name: 'SERVER_WALLET_2',
        key: process.env.SERVER_WALLET_KEY_2,
        envAddress: process.env.SERVER_WALLET_ADDRESS_2
      },
      {
        name: 'SERVER_WALLET_3',
        key: process.env.SERVER_WALLET_KEY_3,
        envAddress: process.env.SERVER_WALLET_ADDRESS_3
      },
      {
        name: 'SERVER_WALLET_4',
        key: process.env.SERVER_WALLET_KEY_4,
        envAddress: process.env.SERVER_WALLET_ADDRESS_4
      }
    ];
    
    console.log('\nüîë –ù–∞—à—ñ —Å–µ—Ä–≤–µ—Ä–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ:');
    let authorizedWallet = null;
    
    ourWallets.forEach(walletInfo => {
      if (walletInfo.key) {
        try {
          const wallet = new ethers.Wallet(walletInfo.key);
          const actualAddress = wallet.address;
          const isAuthorized = actualAddress.toLowerCase() === contractServerWallet.toLowerCase();
          
          console.log(`\n${walletInfo.name}:`);
          console.log(`  –ê–¥—Ä–µ—Å–∞ –∑ .env:     ${walletInfo.envAddress || '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
          console.log(`  –§–∞–∫—Ç–∏—á–Ω–∞ –∞–¥—Ä–µ—Å–∞:   ${actualAddress}`);
          console.log(`  –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π:     ${isAuthorized ? '‚úÖ –¢–ê–ö' : '‚ùå –ù–Ü'}`);
          
          if (isAuthorized) {
            authorizedWallet = walletInfo;
          }
        } catch (error) {
          console.log(`\n${walletInfo.name}: ‚ùå –ü–æ–º–∏–ª–∫–∞ - ${error.message}`);
        }
      } else {
        console.log(`\n${walletInfo.name}: ‚ùå –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π`);
      }
    });
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    if (authorizedWallet) {
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å –∑–Ω–∞–π–¥–µ–Ω–æ: ${authorizedWallet.name}`);
      console.log('üí° –†—ñ—à–µ–Ω–Ω—è: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–µ–π –≥–∞–º–∞–Ω–µ—Ü—å –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ serverWallet –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ');
    } else {
      console.log('‚ùå –ñ–æ–¥–µ–Ω –∑ –Ω–∞—à–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ!');
      console.log('üí° –†—ñ—à–µ–Ω–Ω—è: –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ serverWallet –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ –Ω–∞ –æ–¥–∏–Ω –∑ –Ω–∞—à–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
checkContractServerWallet();