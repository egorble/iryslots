import fetch from 'node-fetch';

const SERVER_URL = 'http://localhost:3001';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —á–µ—Ä–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
async function monitorQueue() {
  console.log('üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ...');
  console.log('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n');

  let previousStats = null;

  const monitor = async () => {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–≥–∏
      const queueResponse = await fetch(`${SERVER_URL}/api/queue/stats`);
      const queueData = await queueResponse.json();

      // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤
      const walletResponse = await fetch(`${SERVER_URL}/api/wallets/stats`);
      const walletData = await walletResponse.json();

      if (queueData.success && walletData.success) {
        const queue = queueData.data;
        const wallets = walletData.data;

        // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        console.clear();
        console.log('üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ...');
        console.log('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n');

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–º–∞–Ω—Ü—ñ–≤
        console.log('üëõ –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—ñ–≤:');
        console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${wallets.availableWallets}/${wallets.totalWallets}`);
        console.log(`   –û–±—Ä–æ–±–ª—è—é—Ç—å: ${wallets.processingWallets}`);
        console.log(`   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${wallets.successRate}`);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥–∏
        console.log('\nüì• –°—Ç–∞—Ç—É—Å —á–µ—Ä–≥–∏:');
        console.log(`   –í —á–µ—Ä–∑—ñ –∑–∞—Ä–∞–∑: ${queue.currentQueueSize}/${queue.maxQueueSize}`);
        console.log(`   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ${queue.queueUtilization}`);
        console.log(`   –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è: ${queue.isProcessingQueue ? '‚úÖ –¢–ê–ö' : '‚ùå –ù–Ü'}`);

        if (queue.totalQueued > 0) {
          console.log(`   –ó–∞–≥–∞–ª–æ–º –≤ —á–µ—Ä–∑—ñ –±—É–ª–æ: ${queue.totalQueued}`);
          console.log(`   –û–±—Ä–æ–±–ª–µ–Ω–æ: ${queue.totalProcessed}`);
          console.log(`   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ${queue.averageWaitTime}ms`);
          console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ${queue.maxWaitTime}ms`);
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –∑–º—ñ–Ω–∏
        if (previousStats) {
          const queueChange = queue.currentQueueSize - previousStats.queue.currentQueueSize;
          const processedChange = queue.totalProcessed - previousStats.queue.totalProcessed;

          if (queueChange !== 0 || processedChange !== 0) {
            console.log('\nüìà –ó–º—ñ–Ω–∏:');
            if (queueChange > 0) {
              console.log(`   üì• +${queueChange} –≤ —á–µ—Ä–≥—É`);
            } else if (queueChange < 0) {
              console.log(`   üì§ ${Math.abs(queueChange)} –∑ —á–µ—Ä–≥–∏`);
            }
            if (processedChange > 0) {
              console.log(`   ‚úÖ +${processedChange} –æ–±—Ä–æ–±–ª–µ–Ω–æ`);
            }
          }
        }

        // –î–µ—Ç–∞–ª—ñ –ø–æ –≥–∞–º–∞–Ω—Ü—è—Ö
        console.log('\nüîç –î–µ—Ç–∞–ª—ñ –≥–∞–º–∞–Ω—Ü—ñ–≤:');
        wallets.wallets.forEach(wallet => {
          const status = wallet.isProcessing ? 'üîÑ –û–±—Ä–æ–±–ª—è—î' : 
                        wallet.isAvailable ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏–π' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π';
          console.log(`   ${wallet.name}: ${status} (${wallet.successCount}‚úÖ/${wallet.errorCount}‚ùå)`);
        });

        console.log(`\nüïê –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${new Date().toLocaleTimeString()}`);

        previousStats = {
          queue: { ...queue },
          wallets: { ...wallets }
        };
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:', error.message);
    }
  };

  // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø—É—Å–∫
  await monitor();

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
  const interval = setInterval(monitor, 2000);

  // –û–±—Ä–æ–±–∫–∞ Ctrl+C
  process.on('SIGINT', () => {
    clearInterval(interval);
    console.log('\n\nüëã –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ');
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
monitorQueue();