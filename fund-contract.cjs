const { ethers } = require('ethers');
require('dotenv').config();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
const provider = new ethers.JsonRpcProvider(process.env.IRYS_RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

function formatIRYS(wei) {
  return ethers.formatEther(wei);
}

function parseIRYS(amount) {
  return ethers.parseEther(amount.toString());
}

async function fundContract() {
  console.log('üí∞ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ–Ω–¥—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...');
  console.log(`üìç –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${process.env.CONTRACT_ADDRESS}`);
  console.log(`üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${wallet.address}`);
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    const senderBalance = await provider.getBalance(wallet.address);
    console.log(`üí≥ –ë–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: ${formatIRYS(senderBalance)} IRYS`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const contractBalanceBefore = await provider.getBalance(process.env.CONTRACT_ADDRESS);
    console.log(`üè¶ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formatIRYS(contractBalanceBefore)} IRYS`);
    
    // –°—É–º–∞ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏)
    const fundAmount = parseIRYS('10.0'); // 1 IRYS
    
    if (senderBalance < fundAmount) {
      console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ: ${formatIRYS(fundAmount)} IRYS`);
      process.exit(1);
    }
    
    console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${formatIRYS(fundAmount)} IRYS –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç...`);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—à—Ç–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const tx = await wallet.sendTransaction({
      to: process.env.CONTRACT_ADDRESS,
      value: fundAmount,
      gasLimit: 50000 // –ë—ñ–ª—å—à–µ –≥–∞–∑—É –¥–ª—è receive() —Ñ—É–Ω–∫—Ü—ñ—ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    });
    
    console.log(`‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
    
    // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    const receipt = await tx.wait();
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤ –±–ª–æ—Ü—ñ: ${receipt.blockNumber}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const contractBalanceAfter = await provider.getBalance(process.env.CONTRACT_ADDRESS);
    console.log(`üè¶ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formatIRYS(contractBalanceAfter)} IRYS`);
    
    const increase = contractBalanceAfter - contractBalanceBefore;
    console.log(`üìà –ó–±—ñ–ª—å—à–µ–Ω–Ω—è: ${formatIRYS(increase)} IRYS`);
    
    console.log('üéâ –§–æ–Ω–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ–Ω–¥—É:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
if (require.main === module) {
  fundContract().catch(console.error);
}

module.exports = { fundContract };