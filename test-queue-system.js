import fetch from 'node-fetch';

const SERVER_URL = 'http://localhost:3001';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —á–µ—Ä–≥–∏
async function testQueueSystem() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —á–µ—Ä–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...\n');

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥–∏...');
    let queueResponse = await fetch(`${SERVER_URL}/api/queue/stats`);
    let queueData = await queueResponse.json();
    
    if (queueData.success) {
      console.log(`üì• –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏: ${queueData.data.currentQueueSize}`);
      console.log(`üìà –ó–∞–≥–∞–ª–æ–º –≤ —á–µ—Ä–∑—ñ –±—É–ª–æ: ${queueData.data.totalQueued}`);
      console.log(`‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: ${queueData.data.totalProcessed}`);
    }

    // –°–∏–º—É–ª—é—î–º–æ –≤–µ–ª–∏–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    console.log('\nüöÄ –°–∏–º—É–ª—è—Ü—ñ—è 15 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...');
    
    const testAddress = '0x233c8C54F25734B744E522bdC1Eed9cbc8C97D0c';
    const promises = [];
    const startTime = Date.now();
    
    for (let i = 0; i < 15; i++) {
      const gameResult = {
        playerAddress: testAddress,
        betAmount: 1,
        winAmount: i % 3 === 0 ? 2 : 0, // –ö–æ–∂–Ω–∞ —Ç—Ä–µ—Ç—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è - –≤–∏–≥—Ä–∞—à
        gameData: {
          fruit0: 'cherry',
          fruit1: 'cherry',
          fruit2: i % 3 === 0 ? 'cherry' : 'apple',
          timestamp: Date.now() + i // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π timestamp
        }
      };

      const promise = fetch(`${SERVER_URL}/api/game/result`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(gameResult)
      }).then(res => res.json()).then(data => ({
        index: i,
        success: data.success,
        error: data.error,
        completedAt: Date.now()
      }));

      promises.push(promise);
      
      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
      await new Promise(resolve => setTimeout(resolve, 50));
    }

    // –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ —á–µ—Ä–≥—É –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏
    const monitorInterval = setInterval(async () => {
      try {
        const response = await fetch(`${SERVER_URL}/api/queue/stats`);
        const data = await response.json();
        if (data.success && data.data.currentQueueSize > 0) {
          console.log(`‚è≥ –í —á–µ—Ä–∑—ñ: ${data.data.currentQueueSize}, –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è: ${data.data.isProcessingQueue ? '–¢–ê–ö' : '–ù–Ü'}`);
        }
      } catch (error) {
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
      }
    }, 500);

    // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    const results = await Promise.all(promises);
    clearInterval(monitorInterval);
    
    const totalTime = Date.now() - startTime;
    
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:');
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: ${successful}`);
    console.log(`‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö: ${failed}`);
    console.log(`‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${totalTime}ms`);
    console.log(`üìä –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é: ${Math.round(totalTime / results.length)}ms`);

    // –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –Ω–µ–≤–¥–∞–ª–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    const failedResults = results.filter(r => !r.success);
    if (failedResults.length > 0) {
      console.log('\n‚ùå –î–µ—Ç–∞–ª—ñ –Ω–µ–≤–¥–∞–ª–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:');
      failedResults.forEach(result => {
        console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è ${result.index + 1}: ${result.error}`);
      });
    }

    // –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥–∏
    console.log('\nüìä –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥–∏...');
    queueResponse = await fetch(`${SERVER_URL}/api/queue/stats`);
    queueData = await queueResponse.json();
    
    if (queueData.success) {
      console.log(`üì• –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏: ${queueData.data.currentQueueSize}`);
      console.log(`üìà –ó–∞–≥–∞–ª–æ–º –≤ —á–µ—Ä–∑—ñ –±—É–ª–æ: ${queueData.data.totalQueued}`);
      console.log(`‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: ${queueData.data.totalProcessed}`);
      console.log(`‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ${queueData.data.averageWaitTime}ms`);
      console.log(`‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ${queueData.data.maxWaitTime}ms`);
      console.log(`üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–µ—Ä–≥–∏: ${queueData.data.queueUtilization}`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–º–∞–Ω—Ü—ñ–≤
    console.log('\nüëõ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–º–∞–Ω—Ü—ñ–≤ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É...');
    const walletResponse = await fetch(`${SERVER_URL}/api/wallets/stats`);
    const walletData = await walletResponse.json();
    
    if (walletData.success) {
      console.log(`üìà –ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${walletData.data.successRate}`);
      console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: ${walletData.data.totalTransactions}`);
      
      walletData.data.wallets.forEach(wallet => {
        if (wallet.successCount > 0 || wallet.errorCount > 0) {
          console.log(`   ${wallet.name}: ${wallet.successCount} —É—Å–ø—ñ—à–Ω–∏—Ö, ${wallet.errorCount} –ø–æ–º–∏–ª–æ–∫`);
        }
      });
    }

    console.log('\nüéâ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ —á–µ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è —á–µ—Ä–≥–∏
async function testQueueClear() {
  console.log('\nüßπ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è —á–µ—Ä–≥–∏...');
  
  try {
    const response = await fetch(`${SERVER_URL}/api/queue/clear`, {
      method: 'POST'
    });
    const data = await response.json();
    
    if (data.success) {
      console.log(`‚úÖ ${data.data.message}`);
    } else {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${data.error}`);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–µ—Ä–≥–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
console.log('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ —á–µ—Ä–≥–∏...');
testQueueSystem().then(() => {
  console.log('\n' + '='.repeat(50));
  return testQueueClear();
});