import fetch from 'node-fetch';

const SERVER_URL = 'http://localhost:3001';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
async function testWalletBalancing() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—ñ–≤...\n');

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤
    console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤...');
    const statsResponse = await fetch(`${SERVER_URL}/api/wallets/stats`);
    const statsData = await statsResponse.json();
    
    if (statsData.success) {
      console.log(`‚úÖ –ó–∞–≥–∞–ª–æ–º –≥–∞–º–∞–Ω—Ü—ñ–≤: ${statsData.data.totalWallets}`);
      console.log(`üü¢ –î–æ—Å—Ç—É–ø–Ω–∏—Ö: ${statsData.data.availableWallets}`);
      console.log(`üîÑ –û–±—Ä–æ–±–ª—è—é—Ç—å: ${statsData.data.processingWallets}`);
      console.log(`üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${statsData.data.successRate}`);
      
      console.log('\nüëõ –î–µ—Ç–∞–ª—ñ –≥–∞–º–∞–Ω—Ü—ñ–≤:');
      statsData.data.wallets.forEach(wallet => {
        console.log(`   ${wallet.name}: ${wallet.address}`);
        console.log(`      –î–æ—Å—Ç—É–ø–Ω–∏–π: ${wallet.isAvailable ? '‚úÖ' : '‚ùå'}`);
        console.log(`      –û–±—Ä–æ–±–ª—è—î: ${wallet.isProcessing ? 'üîÑ' : '‚è∏Ô∏è'}`);
        console.log(`      –£—Å–ø—ñ—à–Ω–∏—Ö: ${wallet.successCount}, –ü–æ–º–∏–ª–æ–∫: ${wallet.errorCount}`);
        console.log('');
      });
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsData.error);
    }

    // –°–∏–º—É–ª—é—î–º–æ –∫—ñ–ª—å–∫–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è
    console.log('üöÄ –°–∏–º—É–ª—è—Ü—ñ—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...');
    
    const testAddress = '0x233c8C54F25734B744E522bdC1Eed9cbc8C97D0c'; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –∞–¥—Ä–µ—Å
    const promises = [];
    
    for (let i = 0; i < 5; i++) {
      const gameResult = {
        playerAddress: testAddress,
        betAmount: 1,
        winAmount: i % 2 === 0 ? 2 : 0, // –ß–µ—Ä–≥—É—î–º–æ –≤–∏–≥—Ä–∞—à—ñ —Ç–∞ –ø—Ä–æ–≥—Ä–∞—à—ñ
        gameData: {
          fruit0: 'cherry',
          fruit1: 'cherry',
          fruit2: i % 2 === 0 ? 'cherry' : 'apple',
          timestamp: Date.now()
        }
      };

      promises.push(
        fetch(`${SERVER_URL}/api/game/result`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(gameResult)
        }).then(res => res.json()).then(data => ({
          index: i,
          success: data.success,
          error: data.error
        }))
      );
    }

    const results = await Promise.all(promises);
    
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:');
    results.forEach(result => {
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è ${result.index + 1}: ${result.success ? '‚úÖ –£—Å–ø—ñ—à–Ω–æ' : '‚ùå –ü–æ–º–∏–ª–∫–∞ - ' + result.error}`);
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—ñ–≤...');
    const finalStatsResponse = await fetch(`${SERVER_URL}/api/wallets/stats`);
    const finalStatsData = await finalStatsResponse.json();
    
    if (finalStatsData.success) {
      console.log(`üìà –§—ñ–Ω–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${finalStatsData.data.successRate}`);
      console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: ${finalStatsData.data.totalTransactions}`);
      
      finalStatsData.data.wallets.forEach(wallet => {
        if (wallet.successCount > 0 || wallet.errorCount > 0) {
          console.log(`   ${wallet.name}: ${wallet.successCount} —É—Å–ø—ñ—à–Ω–∏—Ö, ${wallet.errorCount} –ø–æ–º–∏–ª–æ–∫`);
        }
      });
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testWalletBalancing();