const { ethers } = require('ethers');
require('dotenv').config();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
const provider = new ethers.JsonRpcProvider(process.env.IRYS_RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

function formatIRYS(wei) {
  return ethers.formatEther(wei);
}

function parseIRYS(amount) {
  return ethers.parseEther(amount.toString());
}

async function fundContract(amount = '1.0') {
  console.log('üí∞ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ–Ω–¥—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...');
  console.log(`üìç –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${process.env.CONTRACT_ADDRESS}`);
  console.log(`üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${wallet.address}`);
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    const senderBalance = await provider.getBalance(wallet.address);
    console.log(`üí≥ –ë–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: ${formatIRYS(senderBalance)} IRYS`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const contractBalanceBefore = await provider.getBalance(process.env.CONTRACT_ADDRESS);
    console.log(`üè¶ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formatIRYS(contractBalanceBefore)} IRYS`);
    
    // –°—É–º–∞ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
    const fundAmount = parseIRYS(amount);
    
    if (senderBalance < fundAmount) {
      console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ: ${formatIRYS(fundAmount)} IRYS`);
      process.exit(1);
    }
    
    console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${formatIRYS(fundAmount)} IRYS –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç...`);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—à—Ç–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ receive() —Ñ—É–Ω–∫—Ü—ñ—é)
    const tx = await wallet.sendTransaction({
      to: process.env.CONTRACT_ADDRESS,
      value: fundAmount,
      gasLimit: 50000 // –¢—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –≥–∞–∑—É –¥–ª—è receive()
    });
    
    console.log(`‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
    
    // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    const receipt = await tx.wait();
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤ –±–ª–æ—Ü—ñ: ${receipt.blockNumber}`);
    console.log(`‚õΩ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≥–∞–∑—É: ${receipt.gasUsed.toString()}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const contractBalanceAfter = await provider.getBalance(process.env.CONTRACT_ADDRESS);
    console.log(`üè¶ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formatIRYS(contractBalanceAfter)} IRYS`);
    
    const increase = contractBalanceAfter - contractBalanceBefore;
    console.log(`üìà –ó–±—ñ–ª—å—à–µ–Ω–Ω—è: ${formatIRYS(increase)} IRYS`);
    
    console.log('üéâ –§–æ–Ω–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ!');
    
    return {
      txHash: tx.hash,
      amount: formatIRYS(fundAmount),
      newBalance: formatIRYS(contractBalanceAfter)
    };
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ–Ω–¥—É:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
async function bulkFund(amounts) {
  console.log('üîÑ –ú–∞—Å–æ–≤–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ–Ω–¥—É...');
  
  for (let i = 0; i < amounts.length; i++) {
    console.log(`\n--- –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ${i + 1}/${amounts.length} ---`);
    try {
      await fundContract(amounts[i]);
      console.log(`‚úÖ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ${amounts[i]} IRYS –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
      
      // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
      if (i < amounts.length - 1) {
        console.log('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Å–µ–∫—É–Ω–¥...');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ${amounts[i]} IRYS:`, error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args[0] === 'bulk') {
    // –ú–∞—Å–æ–≤–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: node fund-contract-advanced.cjs bulk 1.0 2.0 0.5
    const amounts = args.slice(1);
    if (amounts.length === 0) {
      console.error('‚ùå –í–∫–∞–∂—ñ—Ç—å —Å—É–º–∏ –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è');
      process.exit(1);
    }
    bulkFund(amounts).catch(console.error);
  } else {
    // –û–¥–∏–Ω–æ—á–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: node fund-contract-advanced.cjs 5.0
    const amount = args[0] || '1.0';
    fundContract(amount).catch(console.error);
  }
}

module.exports = { fundContract, bulkFund };