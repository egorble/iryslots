const { ethers } = require('ethers');
const fs = require('fs');
require('dotenv').config();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
const provider = new ethers.JsonRpcProvider(process.env.IRYS_RPC_URL);
const ownerWallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
const contractABI = JSON.parse(
  fs.readFileSync('./artifacts/SlotMachineBank.abi.json', 'utf8')
);

const contract = new ethers.Contract(
  process.env.CONTRACT_ADDRESS,
  contractABI,
  ownerWallet
);

function formatIRYS(wei) {
  return ethers.formatEther(wei);
}

function parseIRYS(amount) {
  return ethers.parseEther(amount.toString());
}

async function checkOwnership() {
  try {
    const contractOwner = await contract.owner();
    const currentAddress = ownerWallet.address;
    
    console.log(`üîê –í–ª–∞—Å–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${contractOwner}`);
    console.log(`üë§ –ü–æ—Ç–æ—á–Ω–∏–π –∞–¥—Ä–µ—Å: ${currentAddress}`);
    
    if (contractOwner.toLowerCase() !== currentAddress.toLowerCase()) {
      throw new Error('‚ùå –í–∏ –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É!');
    }
    
    console.log('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –ø—Ä–∞–≤–∞ –≤–ª–∞—Å–Ω–∏–∫–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤:', error.message);
    return false;
  }
}

async function getContractStats() {
  try {
    const [totalDeposited, contractBalance] = await contract.getContractStats();
    const minDeposit = await contract.minDeposit();
    const isPaused = await contract.paused();
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:');
    console.log(`üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${formatIRYS(contractBalance)} IRYS`);
    console.log(`üì• –í—Å—å–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤: ${formatIRYS(totalDeposited)} IRYS`);
    console.log(`üíé –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${formatIRYS(minDeposit)} IRYS`);
    console.log(`‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ: ${isPaused ? '–¢–∞–∫' : '–ù—ñ'}`);
    
    return {
      contractBalance,
      totalDeposited,
      minDeposit,
      isPaused
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    throw error;
  }
}

async function emergencyWithdraw(amount) {
  console.log(`üí∏ –ï–∫—Å—Ç—Ä–µ–Ω–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è ${amount} IRYS –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...`);
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –≤–ª–∞—Å–Ω–∏–∫–∞
    const hasRights = await checkOwnership();
    if (!hasRights) {
      process.exit(1);
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await getContractStats();
    
    const withdrawAmount = parseIRYS(amount);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤
    if (stats.contractBalance < withdrawAmount) {
      console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ!`);
      console.error(`üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: ${formatIRYS(stats.contractBalance)} IRYS`);
      console.error(`üí∏ –ó–∞–ø–∏—Ç–∞–Ω–æ: ${amount} IRYS`);
      process.exit(1);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –≤–ª–∞—Å–Ω–∏–∫–∞ –¥–ª—è –≥–∞–∑—É
    const ownerBalance = await provider.getBalance(ownerWallet.address);
    console.log(`üí≥ –ë–∞–ª–∞–Ω—Å –≤–ª–∞—Å–Ω–∏–∫–∞: ${formatIRYS(ownerBalance)} IRYS`);
    
    if (ownerBalance < parseIRYS('0.01')) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –≥–∞–∑—É!');
      process.exit(1);
    }
    
    console.log(`üì§ –í–∏–≤–µ–¥–µ–Ω–Ω—è ${amount} IRYS...`);
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ emergencyWithdraw
    const tx = await contract.emergencyWithdraw(withdrawAmount, {
      gasLimit: 100000
    });
    
    console.log(`‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
    
    // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    const receipt = await tx.wait();
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤ –±–ª–æ—Ü—ñ: ${receipt.blockNumber}`);
    console.log(`‚õΩ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≥–∞–∑—É: ${receipt.gasUsed.toString()}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –±–∞–ª–∞–Ω—Å–∏
    const newContractBalance = await provider.getBalance(process.env.CONTRACT_ADDRESS);
    const newOwnerBalance = await provider.getBalance(ownerWallet.address);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–≤–µ–¥–µ–Ω–Ω—è:`);
    console.log(`üè¶ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: ${formatIRYS(newContractBalance)} IRYS`);
    console.log(`üë§ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –≤–ª–∞—Å–Ω–∏–∫–∞: ${formatIRYS(newOwnerBalance)} IRYS`);
    console.log(`üìà –í–∏–≤–µ–¥–µ–Ω–æ: ${amount} IRYS`);
    
    console.log('üéâ –ö–æ—à—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–≤–µ–¥–µ–Ω–æ!');
    
    return {
      txHash: tx.hash,
      amount: amount,
      newContractBalance: formatIRYS(newContractBalance),
      newOwnerBalance: formatIRYS(newOwnerBalance)
    };
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤:', error.message);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
    if (error.message?.includes('InsufficientContractBalance')) {
      console.error('üí° –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ');
    } else if (error.message?.includes('OnlyOwner')) {
      console.error('üí° –ü—Ä–∏—á–∏–Ω–∞: –¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –∫–æ—à—Ç–∏');
    } else if (error.message?.includes('AmountTooSmall')) {
      console.error('üí° –ü—Ä–∏—á–∏–Ω–∞: –°—É–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞ (–ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ > 0)');
    }
    
    throw error;
  }
}

async function withdrawAll() {
  console.log('üí∏ –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—à—Ç—ñ–≤ –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...');
  
  try {
    const stats = await getContractStats();
    const allAmount = formatIRYS(stats.contractBalance);
    
    if (parseFloat(allAmount) === 0) {
      console.log('üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –≤–∏–≤–æ–¥–∏—Ç–∏');
      return;
    }
    
    console.log(`üí∞ –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –∫–æ—à—Ç–∏: ${allAmount} IRYS`);
    
    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    console.log('\n‚ö†Ô∏è  –£–í–ê–ì–ê: –í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—å –≤–∏–≤–µ—Å—Ç–∏ –í–°–Ü –∫–æ—à—Ç–∏ –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É!');
    console.log('‚ö†Ô∏è  –¶–µ –º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ –≥—Ä—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é –¥–ª—è –≥—Ä–∞–≤—Ü—ñ–≤!');
    
    return await emergencyWithdraw(allAmount);
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—à—Ç—ñ–≤:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤)
async function withdrawPartial(leaveAmount = '1.0') {
  console.log(`üí∏ –ß–∞—Å—Ç–∫–æ–≤–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∏—Ç–∏ ${leaveAmount} IRYS)...`);
  
  try {
    const stats = await getContractStats();
    const currentBalance = parseFloat(formatIRYS(stats.contractBalance));
    const leaveAmountFloat = parseFloat(leaveAmount);
    
    if (currentBalance <= leaveAmountFloat) {
      console.log(`üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å (${currentBalance} IRYS) –º–µ–Ω—à–∏–π –∞–±–æ —Ä—ñ–≤–Ω–∏–π —Ä–µ–∑–µ—Ä–≤—É (${leaveAmount} IRYS)`);
      console.log('‚ùå –ù—ñ—á–æ–≥–æ –≤–∏–≤–æ–¥–∏—Ç–∏');
      return;
    }
    
    const withdrawAmount = (currentBalance - leaveAmountFloat).toFixed(6);
    console.log(`üí∞ –í–∏–≤–æ–¥–∏–º–æ: ${withdrawAmount} IRYS`);
    console.log(`üíé –ó–∞–ª–∏—à–∞—î–º–æ: ${leaveAmount} IRYS`);
    
    return await emergencyWithdraw(withdrawAmount);
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0];
  
  if (command === 'stats') {
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: node withdraw-from-contract.cjs stats
    getContractStats().catch(console.error);
  } else if (command === 'all') {
    // –í–∏–≤–µ—Å—Ç–∏ –≤—Å–µ: node withdraw-from-contract.cjs all
    withdrawAll().catch(console.error);
  } else if (command === 'partial') {
    // –ß–∞—Å—Ç–∫–æ–≤–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: node withdraw-from-contract.cjs partial 2.0
    const leaveAmount = args[1] || '1.0';
    withdrawPartial(leaveAmount).catch(console.error);
  } else if (command && !isNaN(parseFloat(command))) {
    // –í–∏–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—É–º—É: node withdraw-from-contract.cjs 5.0
    emergencyWithdraw(command).catch(console.error);
  } else {
    console.log('üìñ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
    console.log('  node withdraw-from-contract.cjs stats           - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    console.log('  node withdraw-from-contract.cjs 5.0             - –≤–∏–≤–µ—Å—Ç–∏ 5.0 IRYS');
    console.log('  node withdraw-from-contract.cjs all             - –≤–∏–≤–µ—Å—Ç–∏ –≤—Å–µ');
    console.log('  node withdraw-from-contract.cjs partial 2.0     - –≤–∏–≤–µ—Å—Ç–∏ –≤—Å–µ, –∑–∞–ª–∏—à–∏—Ç–∏ 2.0 IRYS');
  }
}

module.exports = { 
  emergencyWithdraw, 
  withdrawAll, 
  withdrawPartial, 
  getContractStats, 
  checkOwnership 
};